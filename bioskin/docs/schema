create table public.activity_log (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  user_identifier text not null,
  action text not null,
  details text null,
  constraint activity_log_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_activity_log_created_at on public.activity_log using btree (created_at desc) TABLESPACE pg_default;

create table public.bundle_components (
  id bigint generated always as identity not null,
  bundle_id bigint not null,
  item_id bigint not null,
  quantity_in_bundle integer not null,
  created_at timestamp with time zone null default timezone ('utc'::text, now()),
  constraint bundle_components_pkey primary key (id),
  constraint bundle_components_bundle_id_item_id_key unique (bundle_id, item_id),
  constraint bundle_components_bundle_id_fkey foreign KEY (bundle_id) references bundles (id) on delete CASCADE,
  constraint bundle_components_item_id_fkey foreign KEY (item_id) references items (id) on delete RESTRICT,
  constraint bundle_components_quantity_in_bundle_check check ((quantity_in_bundle > 0))
) TABLESPACE pg_default;

create table public.bundles (
  id bigint generated always as identity not null,
  bundle_sku text null,
  name text not null,
  description text null,
  price numeric(10, 2) null,
  is_active boolean null default true,
  created_at timestamp with time zone null default timezone ('utc'::text, now()),
  updated_at timestamp with time zone null default timezone ('utc'::text, now()),
  constraint bundles_pkey primary key (id),
  constraint bundles_bundle_sku_key unique (bundle_sku)
) TABLESPACE pg_default;

create trigger on_bundle_update BEFORE
update on bundles for EACH row
execute FUNCTION handle_bundle_update ();

create table public.customers (
  id uuid not null default extensions.uuid_generate_v4 (),
  full_name text not null,
  email text null,
  phone text null,
  address text null,
  notes text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint customers_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_customers_email on public.customers using btree (email) TABLESPACE pg_default;

create index IF not exists idx_customers_full_name on public.customers using btree (full_name) TABLESPACE pg_default;

create trigger set_customer_timestamp BEFORE
update on customers for EACH row
execute FUNCTION trigger_set_timestamp ();

create table public.inventory_transactions (
  id bigint generated always as identity not null,
  item_id bigint not null,
  transaction_type text not null,
  quantity_change integer not null,
  quantity_before integer not null,
  quantity_after integer not null,
  transaction_date timestamp with time zone not null default timezone ('utc'::text, now()),
  reference_id text null,
  reference_type text null,
  user_id uuid null,
  username_snapshot text null,
  notes text null,
  location_id integer null,
  constraint inventory_transactions_pkey primary key (id),
  constraint inventory_transactions_item_id_fkey foreign KEY (item_id) references items (id) on delete RESTRICT,
  constraint inventory_transactions_location_id_fkey foreign KEY (location_id) references storage_locations (id) on delete set null,
  constraint inventory_transactions_user_id_fkey foreign KEY (user_id) references users (id) on delete set null
) TABLESPACE pg_default;

create index IF not exists idx_inventory_transactions_item_id on public.inventory_transactions using btree (item_id) TABLESPACE pg_default;

create index IF not exists idx_inventory_transactions_transaction_date on public.inventory_transactions using btree (transaction_date) TABLESPACE pg_default;

create index IF not exists idx_inventory_transactions_reference_id on public.inventory_transactions using btree (reference_id) TABLESPACE pg_default;

create table public.item_location_quantities (
  item_id bigint not null,
  location_id integer not null,
  quantity integer not null default 0,
  last_updated timestamp with time zone not null default timezone ('utc'::text, now()),
  constraint item_location_quantities_pkey primary key (item_id, location_id),
  constraint item_location_quantities_item_id_fkey foreign KEY (item_id) references items (id) on delete CASCADE,
  constraint item_location_quantities_location_id_fkey foreign KEY (location_id) references storage_locations (id) on delete RESTRICT,
  constraint item_location_quantities_quantity_check check ((quantity >= 0))
) TABLESPACE pg_default;

create index IF not exists idx_ilq_item_id on public.item_location_quantities using btree (item_id) TABLESPACE pg_default;

create index IF not exists idx_ilq_location_id on public.item_location_quantities using btree (location_id) TABLESPACE pg_default;

create trigger set_item_location_quantities_last_updated BEFORE
update on item_location_quantities for EACH row
execute FUNCTION trigger_set_last_updated ();

create table public.items (
  id bigint generated by default as identity not null,
  sku text null,
  name text not null,
  description text null,
  variant text null,
  cost_price numeric(10, 2) null default 0.00,
  category text null,
  status text null default 'Normal'::text,
  low_stock_threshold integer null default 10,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  is_archived boolean not null default false,
  constraint items_pkey primary key (id),
  constraint items_sku_key unique (sku)
) TABLESPACE pg_default;

create index IF not exists idx_items_sku on public.items using btree (sku) TABLESPACE pg_default;

create index IF not exists idx_items_name on public.items using btree (name) TABLESPACE pg_default;

create index IF not exists idx_items_category on public.items using btree (category) TABLESPACE pg_default;

create index IF not exists idx_items_is_archived on public.items using btree (is_archived) TABLESPACE pg_default;

create trigger set_items_timestamp BEFORE
update on items for EACH row
execute FUNCTION trigger_set_timestamp ();


create view public.items_with_total_quantity as
select
  i.id,
  i.sku,
  i.name,
  i.description,
  i.cost_price,
  i.category,
  i.variant,
  i.status,
  i.is_archived,
  i.created_at,
  i.updated_at,
  COALESCE(
    (
      select
        sum(ilq.quantity) as sum
      from
        item_location_quantities ilq
      where
        ilq.item_id = i.id
    ),
    0::bigint
  ) as total_quantity
from
  items i;

  create table public.returns (
    id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    item_id bigint not null,
    quantity_returned integer not null,
    reason text not null,
    condition text not null,
    customer_id uuid null,
    notes text null,
    processed_by_user_id uuid null,
    inventory_adjusted boolean not null default false,
    constraint returns_pkey primary key (id),
    constraint returns_customer_id_fkey foreign KEY (customer_id) references customers (id) on delete set null,
    constraint returns_item_id_fkey foreign KEY (item_id) references items (id) on delete RESTRICT,
    constraint returns_processed_by_user_id_fkey foreign KEY (processed_by_user_id) references users (id) on delete set null,
    constraint returns_quantity_returned_check check ((quantity_returned > 0))
  ) TABLESPACE pg_default;

  create index IF not exists idx_returns_created_at on public.returns using btree (created_at desc) TABLESPACE pg_default;

  create index IF not exists idx_returns_item_id on public.returns using btree (item_id) TABLESPACE pg_default;

  create index IF not exists idx_returns_customer_id on public.returns using btree (customer_id) TABLESPACE pg_default;


  create table public.sales_order_items (
    id bigint generated always as identity not null,
    sales_order_id bigint not null,
    item_id bigint null,
    bundle_id bigint null,
    item_snapshot_name text not null,
    item_snapshot_sku text null,
    quantity integer not null,
    unit_price numeric(10, 2) not null,
    line_total numeric(10, 2) not null,
    constraint sales_order_items_pkey primary key (id),
    constraint sales_order_items_bundle_id_fkey foreign KEY (bundle_id) references bundles (id) on delete CASCADE,
    constraint sales_order_items_item_id_fkey foreign KEY (item_id) references items (id) on delete RESTRICT,
    constraint sales_order_items_sales_order_id_fkey foreign KEY (sales_order_id) references sales_orders (id) on delete CASCADE,
    constraint chk_item_or_bundle check (
      (
        (
          (item_id is not null)
          and (bundle_id is null)
        )
        or (
          (item_id is null)
          and (bundle_id is not null)
        )
      )
    ),
    constraint sales_order_items_quantity_check check ((quantity > 0))
  ) TABLESPACE pg_default;

  create index IF not exists idx_sales_order_items_sales_order_id on public.sales_order_items using btree (sales_order_id) TABLESPACE pg_default;

  create index IF not exists idx_sales_order_items_item_id on public.sales_order_items using btree (item_id) TABLESPACE pg_default;

  create index IF not exists idx_sales_order_items_bundle_id on public.sales_order_items using btree (bundle_id) TABLESPACE pg_default;

  create table public.sales_orders (
    id bigint generated always as identity not null,
    order_number text null,
    customer_id uuid null,
    order_date timestamp with time zone not null default timezone ('utc'::text, now()),
    status text not null default 'Pending'::text,
    total_amount numeric(10, 2) null default 0.00,
    notes text null,
    created_by_user_id uuid null,
    created_at timestamp with time zone null default timezone ('utc'::text, now()),
    updated_at timestamp with time zone null default timezone ('utc'::text, now()),
    constraint sales_orders_pkey primary key (id),
    constraint sales_orders_order_number_key unique (order_number),
    constraint sales_orders_created_by_user_id_fkey foreign KEY (created_by_user_id) references users (id) on delete set null,
    constraint sales_orders_customer_id_fkey foreign KEY (customer_id) references customers (id) on delete set null
  ) TABLESPACE pg_default;

  create index IF not exists idx_sales_orders_status on public.sales_orders using btree (status) TABLESPACE pg_default;

  create index IF not exists idx_sales_orders_customer_id on public.sales_orders using btree (customer_id) TABLESPACE pg_default;

  create trigger on_sales_order_update BEFORE
  update on sales_orders for EACH row
  execute FUNCTION handle_sales_order_update ();

  create table public.stock_adjustments (
    id bigint generated always as identity not null,
    item_id bigint not null,
    user_id uuid null,
    username_snapshot text null,
    adjustment_quantity integer not null,
    previous_quantity integer not null,
    new_quantity integer not null,
    reason text not null,
    notes text null,
    adjusted_at timestamp with time zone not null default timezone ('utc'::text, now()),
    constraint stock_adjustments_pkey primary key (id),
    constraint stock_adjustments_item_id_fkey foreign KEY (item_id) references items (id) on delete RESTRICT,
    constraint stock_adjustments_user_id_fkey foreign KEY (user_id) references users (id) on delete set null
  ) TABLESPACE pg_default;

  create index IF not exists idx_stock_adjustments_item_id on public.stock_adjustments using btree (item_id) TABLESPACE pg_default;

  create index IF not exists idx_stock_adjustments_adjusted_at on public.stock_adjustments using btree (adjusted_at) TABLESPACE pg_default;


  create table public.stock_transfers (
    id bigint generated always as identity not null,
    transfer_date timestamp with time zone not null default timezone ('utc'::text, now()),
    item_id bigint not null,
    quantity_transferred integer not null,
    source_location text not null,
    destination_location text not null,
    notes text null,
    reference_number text null,
    processed_by_user_id uuid null,
    username_snapshot text null,
    created_at timestamp with time zone null default timezone ('utc'::text, now()),
    constraint stock_transfers_pkey primary key (id),
    constraint stock_transfers_reference_number_key unique (reference_number),
    constraint stock_transfers_item_id_fkey foreign KEY (item_id) references items (id) on delete RESTRICT,
    constraint stock_transfers_processed_by_user_id_fkey foreign KEY (processed_by_user_id) references users (id) on delete set null,
    constraint different_locations check ((source_location <> destination_location)),
    constraint stock_transfers_quantity_transferred_check check ((quantity_transferred > 0))
  ) TABLESPACE pg_default;

  create index IF not exists idx_stock_transfers_item_id on public.stock_transfers using btree (item_id) TABLESPACE pg_default;

  create index IF not exists idx_stock_transfers_date on public.stock_transfers using btree (transfer_date) TABLESPACE pg_default;


  create table public.storage_locations (
    id serial not null,
    name text not null,
    description text null,
    is_active boolean not null default true,
    created_at timestamp with time zone not null default timezone ('utc'::text, now()),
    updated_at timestamp with time zone not null default timezone ('utc'::text, now()),
    constraint storage_locations_pkey primary key (id),
    constraint storage_locations_name_key unique (name)
  ) TABLESPACE pg_default;

  create trigger set_storage_locations_updated_at BEFORE
  update on storage_locations for EACH row
  execute FUNCTION trigger_set_timestamp ();


  create table public.users (
    id uuid not null default gen_random_uuid (),
    username text not null,
    password_hash text not null,
    role text not null default 'employee'::text,
    full_name text null,
    created_at timestamp with time zone null default now(),
    updated_at timestamp with time zone null default now(),
    constraint users_pkey primary key (id),
    constraint users_username_key unique (username)
  ) TABLESPACE pg_default;

  create index IF not exists idx_users_username on public.users using btree (username) TABLESPACE pg_default;

  create trigger set_users_timestamp BEFORE
  update on users for EACH row
  execute FUNCTION trigger_set_timestamp ();

